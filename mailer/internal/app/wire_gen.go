// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"fmt"
	"github.com/tehrelt/mu-lib/tracer"
	"github.com/tehrelt/mu-lib/tracer/interceptors"
	"github.com/tehrelt/mu/mailer/internal/config"
	"github.com/tehrelt/mu/mailer/internal/storage/mailer"
	"github.com/tehrelt/mu/mailer/internal/transport/amqp"
	"github.com/tehrelt/mu/mailer/internal/usecase"
	"github.com/tehrelt/mu/mailer/pkg/pb/notificationpb"
	"go.opentelemetry.io/otel/trace"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

// Injectors from wire.go:

func NewApp(ctx context.Context) (*App, func(), error) {
	configConfig := config.New()
	notificationServiceClient, cleanup, err := _notificationpb(configConfig)
	if err != nil {
		return nil, nil, err
	}
	mailerMailer := mailer.New(configConfig)
	useCase := usecase.New(configConfig, notificationServiceClient, mailerMailer)
	consumer, err := amqp.New(configConfig, useCase)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	tracer, err := _tracer(ctx, configConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	app := newApp(configConfig, consumer, tracer)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

func _tracer(ctx context.Context, cfg *config.Config) (trace.Tracer, error) {
	return tracer.SetupTracer(ctx, cfg.Jaeger.Endpoint, cfg.App.Name)
}

func _notificationpb(cfg *config.Config) (notificationpb.NotificationServiceClient,

	func(),
	error,
) {
	host := cfg.NotificationService.Host
	port := cfg.NotificationService.Port
	addr := fmt.Sprintf("%s:%d", host, port)

	client, err := grpc.NewClient(
		addr, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithUnaryInterceptor(interceptors.UnaryClientInterceptor()), grpc.WithStreamInterceptor(interceptors.StreamClientInterceptor()),
	)
	if err != nil {
		return nil, nil, err
	}

	return notificationpb.NewNotificationServiceClient(client), func() { client.Close() }, nil
}
