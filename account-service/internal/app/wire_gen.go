// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"fmt"
	"github.com/jmoiron/sqlx"
	"github.com/rabbitmq/amqp091-go"
	"github.com/tehrelt/mu-lib/sl"
	"github.com/tehrelt/mu-lib/tracer"
	"github.com/tehrelt/mu-lib/tracer/interceptors"
	"github.com/tehrelt/mu/account-service/internal/config"
	"github.com/tehrelt/mu/account-service/internal/storage/pg/accountstorage"
	"github.com/tehrelt/mu/account-service/internal/storage/rmq"
	"github.com/tehrelt/mu/account-service/internal/transport/amqp"
	"github.com/tehrelt/mu/account-service/internal/transport/grpc"
	"github.com/tehrelt/mu/account-service/pkg/pb/billingpb"
	"github.com/tehrelt/mu/account-service/pkg/pb/housepb"
	"github.com/tehrelt/mu/account-service/pkg/pb/ticketpb"
	"github.com/tehrelt/mu/account-service/pkg/pb/userpb"
	"go.opentelemetry.io/otel/trace"
	grpc2 "google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"log/slog"
	"time"
)

import (
	_ "github.com/jackc/pgx/stdlib"
)

// Injectors from wire.go:

func New(ctx context.Context) (*App, func(), error) {
	configConfig := config.New()
	db, cleanup, err := _pg(configConfig)
	if err != nil {
		return nil, nil, err
	}
	accountStorage := accountstorage.New(db)
	channel, cleanup2, err := _amqp(configConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	broker := rmq.New(configConfig, channel)
	houseServiceClient, cleanup3, err := _housepb(configConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	server := grpc.New(configConfig, accountStorage, broker, houseServiceClient)
	billingServiceClient, cleanup4, err := _billingpb(configConfig)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	ticketServiceClient, cleanup5, err := _ticketpb(configConfig)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	amqpConsumer := amqp.New(configConfig, channel, accountStorage, broker, houseServiceClient, billingServiceClient, ticketServiceClient)
	v := _servers(server, amqpConsumer)
	tracer, err := _tracer(ctx, configConfig)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	app := newApp(v, tracer)
	return app, func() {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

func _pg(cfg *config.Config) (*sqlx.DB, func(), error) {
	host := cfg.Postgres.Host
	port := cfg.Postgres.Port
	user := cfg.Postgres.User
	pass := cfg.Postgres.Pass
	name := cfg.Postgres.Name

	cs := fmt.Sprintf(`postgres://%s:%s@%s:%d/%s?sslmode=disable`, user, pass, host, port, name)

	db, err := sqlx.Connect("pgx", cs)
	if err != nil {
		return nil, nil, err
	}
	slog.Debug("connecting to database", slog.String("conn", cs))
	t := time.Now()
	if err := db.Ping(); err != nil {
		slog.Error("failed to connect to database", slog.String("err", err.Error()), slog.String("conn", cs))
		return nil, func() { db.Close() }, err
	}
	slog.Info("connected to database", slog.String("ping", fmt.Sprintf("%2.fs", time.Since(t).Seconds())))

	return db, func() { db.Close() }, nil
}

func _amqp(cfg *config.Config) (*amqp091.Channel, func(), error) {
	cs := fmt.Sprintf("amqp://%s:%s@%s:%d/", cfg.Amqp.User, cfg.Amqp.Pass, cfg.Amqp.Host, cfg.Amqp.Port)

	log := slog.With(slog.String("cfg", "_amqp"))

	conn, err := amqp091.Dial(cs)
	if err != nil {
		return nil, nil, err
	}

	channel, err := conn.Channel()
	if err != nil {
		return nil, func() {
			conn.Close()
		}, err
	}

	closefn := func() {
		defer conn.Close()
		defer channel.Close()
	}

	if err := amqp_setup_exchange(channel, cfg.PaymentStatusChanged.Exchange, cfg.PaymentStatusChanged.Routing); err != nil {
		slog.Error("failed to setup notifications exchange", sl.Err(err))
		return nil, closefn, err
	}

	exchange := cfg.TicketStatusChangedExchange.Exchange
	log.Info("declaring exchange", slog.String("exchange", exchange))
	if err := channel.ExchangeDeclare(exchange, "topic", true, false, false, false, nil); err != nil {
		slog.Error("failed to declare notifications queue", sl.Err(err))
		return nil, closefn, err
	}

	rq := map[string]string{
		cfg.TicketStatusChangedExchange.ConnectServiceRoute: amqp.ConnectServiceQueue,
		cfg.TicketStatusChangedExchange.NewAccountRoute:     amqp.NewAccountQueue,
	}
	for rk, queueName := range rq {

		log.Info("declaring queue", slog.String("queue", queueName))
		queue, err := channel.QueueDeclare(queueName, true, false, false, false, nil)
		if err != nil {
			log.Error("failed to declare queue", sl.Err(err), slog.String("queue", queueName))
			return nil, closefn, err
		}

		log.Info("binding queue", slog.String("queue", queue.Name), slog.String("rk", rk))
		if err := channel.QueueBind(queue.Name, rk, exchange, false, nil); err != nil {
			log.Error("failed to bind queue", sl.Err(err), slog.String("queue", queueName))
			return nil, closefn, err
		}
	}

	exchange = cfg.ConnectServiceExchange.Exchange
	log.Info("declaring exchange", slog.String("exchange", exchange))
	if err := channel.ExchangeDeclare(exchange, "fanout", true, false, false, false, nil); err != nil {
		slog.Error("failed to declare notifications queue", sl.Err(err))
		return nil, closefn, err
	}

	exchange = cfg.BalanceChangedExchange
	log.Info("declaring exchange", slog.String("exchange", exchange))
	if err := channel.ExchangeDeclare(exchange, "fanout", true, false, false, false, nil); err != nil {
		slog.Error("failed to declare notifications queue", sl.Err(err))
		return nil, closefn, err
	}
	slog.Info("connected to amqp", slog.String("conn", cs))

	return channel, closefn, nil
}

func amqp_setup_exchange(channel *amqp091.Channel, exchange string, queues ...string) error {

	log := slog.With(slog.String("exchange", exchange))
	log.Info("declaring exchange")
	if err := channel.ExchangeDeclare(exchange, "direct", true, false, false, false, nil); err != nil {
		slog.Error("failed to declare notifications queue", sl.Err(err))
		return err
	}

	for _, queueName := range queues {
		log.Info("declaring queue", slog.String("queue", queueName))
		queue, err := channel.QueueDeclare(queueName, true, false, false, false, nil)
		if err != nil {
			log.Error("failed to declare queue", sl.Err(err), slog.String("queue", queueName))
			return err
		}

		log.Info("binding queue", slog.String("queue", queueName))
		if err := channel.QueueBind(queue.Name, queueName, exchange, false, nil); err != nil {
			log.Error("failed to bind queue", sl.Err(err), slog.String("queue", queueName))
			return err
		}
	}

	return nil
}

func _servers(g *grpc.Server, c *amqp.AmqpConsumer) []Server {
	return []Server{g, c}
}

func _userpb(cfg *config.Config) (userpb.UserServiceClient,

	func(),
	error,
) {
	host := cfg.UserService.Host
	port := cfg.UserService.Port
	addr := fmt.Sprintf("%s:%d", host, port)

	client, err := grpc2.NewClient(
		addr, grpc2.WithTransportCredentials(insecure.NewCredentials()), grpc2.WithUnaryInterceptor(interceptors.UnaryClientInterceptor()), grpc2.WithStreamInterceptor(interceptors.StreamClientInterceptor()),
	)
	if err != nil {
		return nil, nil, err
	}

	return userpb.NewUserServiceClient(client), func() { client.Close() }, nil
}

func _housepb(cfg *config.Config) (housepb.HouseServiceClient,

	func(),
	error,
) {
	host := cfg.HouseService.Host
	port := cfg.HouseService.Port
	addr := fmt.Sprintf("%s:%d", host, port)

	client, err := grpc2.NewClient(
		addr, grpc2.WithTransportCredentials(insecure.NewCredentials()), grpc2.WithUnaryInterceptor(interceptors.UnaryClientInterceptor()), grpc2.WithStreamInterceptor(interceptors.StreamClientInterceptor()),
	)
	if err != nil {
		return nil, nil, err
	}

	return housepb.NewHouseServiceClient(client), func() { client.Close() }, nil
}

func _billingpb(cfg *config.Config) (billingpb.BillingServiceClient,

	func(),
	error,
) {
	host := cfg.BillingService.Host
	port := cfg.BillingService.Port
	addr := fmt.Sprintf("%s:%d", host, port)

	client, err := grpc2.NewClient(
		addr, grpc2.WithTransportCredentials(insecure.NewCredentials()), grpc2.WithUnaryInterceptor(interceptors.UnaryClientInterceptor()), grpc2.WithStreamInterceptor(interceptors.StreamClientInterceptor()),
	)
	if err != nil {
		return nil, nil, err
	}

	return billingpb.NewBillingServiceClient(client), func() { client.Close() }, nil
}

func _tracer(ctx context.Context, cfg *config.Config) (trace.Tracer, error) {
	jaeger := cfg.Jaeger.Endpoint
	appname := cfg.App.Name
	slog.Debug("connecting to jaeger", slog.String("jaeger", jaeger), slog.String("appname", appname))

	return tracer.SetupTracer(ctx, jaeger, appname)
}

func _ticketpb(cfg *config.Config) (ticketpb.TicketServiceClient,

	func(),
	error,
) {
	host := cfg.TicketService.Host
	port := cfg.TicketService.Port
	addr := fmt.Sprintf("%s:%d", host, port)

	client, err := grpc2.NewClient(
		addr, grpc2.WithTransportCredentials(insecure.NewCredentials()), grpc2.WithUnaryInterceptor(interceptors.UnaryClientInterceptor()), grpc2.WithStreamInterceptor(interceptors.StreamClientInterceptor()),
	)
	if err != nil {
		return nil, nil, err
	}

	return ticketpb.NewTicketServiceClient(client), func() { client.Close() }, nil
}
