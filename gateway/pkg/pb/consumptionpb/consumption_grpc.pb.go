// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: proto/consumption.proto

package consumptionpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConsumptionService_Create_FullMethodName           = "/consumption.ConsumptionService/Create"
	ConsumptionService_Consume_FullMethodName          = "/consumption.ConsumptionService/Consume"
	ConsumptionService_FindConsumption_FullMethodName  = "/consumption.ConsumptionService/FindConsumption"
	ConsumptionService_FindCabinet_FullMethodName      = "/consumption.ConsumptionService/FindCabinet"
	ConsumptionService_ListConsumptions_FullMethodName = "/consumption.ConsumptionService/ListConsumptions"
	ConsumptionService_ListCabinets_FullMethodName     = "/consumption.ConsumptionService/ListCabinets"
)

// ConsumptionServiceClient is the client API for ConsumptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumptionServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*ConsumeResponse, error)
	FindConsumption(ctx context.Context, in *FindConsumptionRequest, opts ...grpc.CallOption) (*FindConsumptionResponse, error)
	FindCabinet(ctx context.Context, in *FindCabinetRequest, opts ...grpc.CallOption) (*FindCabinetResponse, error)
	ListConsumptions(ctx context.Context, in *ListConsumptionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Consumption], error)
	ListCabinets(ctx context.Context, in *ListCabinetsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Cabinet], error)
}

type consumptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumptionServiceClient(cc grpc.ClientConnInterface) ConsumptionServiceClient {
	return &consumptionServiceClient{cc}
}

func (c *consumptionServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, ConsumptionService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumptionServiceClient) Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*ConsumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsumeResponse)
	err := c.cc.Invoke(ctx, ConsumptionService_Consume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumptionServiceClient) FindConsumption(ctx context.Context, in *FindConsumptionRequest, opts ...grpc.CallOption) (*FindConsumptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindConsumptionResponse)
	err := c.cc.Invoke(ctx, ConsumptionService_FindConsumption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumptionServiceClient) FindCabinet(ctx context.Context, in *FindCabinetRequest, opts ...grpc.CallOption) (*FindCabinetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindCabinetResponse)
	err := c.cc.Invoke(ctx, ConsumptionService_FindCabinet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumptionServiceClient) ListConsumptions(ctx context.Context, in *ListConsumptionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Consumption], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConsumptionService_ServiceDesc.Streams[0], ConsumptionService_ListConsumptions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListConsumptionsRequest, Consumption]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConsumptionService_ListConsumptionsClient = grpc.ServerStreamingClient[Consumption]

func (c *consumptionServiceClient) ListCabinets(ctx context.Context, in *ListCabinetsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Cabinet], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConsumptionService_ServiceDesc.Streams[1], ConsumptionService_ListCabinets_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListCabinetsRequest, Cabinet]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConsumptionService_ListCabinetsClient = grpc.ServerStreamingClient[Cabinet]

// ConsumptionServiceServer is the server API for ConsumptionService service.
// All implementations must embed UnimplementedConsumptionServiceServer
// for forward compatibility.
type ConsumptionServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Consume(context.Context, *ConsumeRequest) (*ConsumeResponse, error)
	FindConsumption(context.Context, *FindConsumptionRequest) (*FindConsumptionResponse, error)
	FindCabinet(context.Context, *FindCabinetRequest) (*FindCabinetResponse, error)
	ListConsumptions(*ListConsumptionsRequest, grpc.ServerStreamingServer[Consumption]) error
	ListCabinets(*ListCabinetsRequest, grpc.ServerStreamingServer[Cabinet]) error
	mustEmbedUnimplementedConsumptionServiceServer()
}

// UnimplementedConsumptionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsumptionServiceServer struct{}

func (UnimplementedConsumptionServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedConsumptionServiceServer) Consume(context.Context, *ConsumeRequest) (*ConsumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Consume not implemented")
}
func (UnimplementedConsumptionServiceServer) FindConsumption(context.Context, *FindConsumptionRequest) (*FindConsumptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindConsumption not implemented")
}
func (UnimplementedConsumptionServiceServer) FindCabinet(context.Context, *FindCabinetRequest) (*FindCabinetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCabinet not implemented")
}
func (UnimplementedConsumptionServiceServer) ListConsumptions(*ListConsumptionsRequest, grpc.ServerStreamingServer[Consumption]) error {
	return status.Errorf(codes.Unimplemented, "method ListConsumptions not implemented")
}
func (UnimplementedConsumptionServiceServer) ListCabinets(*ListCabinetsRequest, grpc.ServerStreamingServer[Cabinet]) error {
	return status.Errorf(codes.Unimplemented, "method ListCabinets not implemented")
}
func (UnimplementedConsumptionServiceServer) mustEmbedUnimplementedConsumptionServiceServer() {}
func (UnimplementedConsumptionServiceServer) testEmbeddedByValue()                            {}

// UnsafeConsumptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumptionServiceServer will
// result in compilation errors.
type UnsafeConsumptionServiceServer interface {
	mustEmbedUnimplementedConsumptionServiceServer()
}

func RegisterConsumptionServiceServer(s grpc.ServiceRegistrar, srv ConsumptionServiceServer) {
	// If the following call pancis, it indicates UnimplementedConsumptionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConsumptionService_ServiceDesc, srv)
}

func _ConsumptionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumptionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumptionService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumptionServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumptionService_Consume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumptionServiceServer).Consume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumptionService_Consume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumptionServiceServer).Consume(ctx, req.(*ConsumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumptionService_FindConsumption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindConsumptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumptionServiceServer).FindConsumption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumptionService_FindConsumption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumptionServiceServer).FindConsumption(ctx, req.(*FindConsumptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumptionService_FindCabinet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCabinetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumptionServiceServer).FindCabinet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumptionService_FindCabinet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumptionServiceServer).FindCabinet(ctx, req.(*FindCabinetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumptionService_ListConsumptions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListConsumptionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsumptionServiceServer).ListConsumptions(m, &grpc.GenericServerStream[ListConsumptionsRequest, Consumption]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConsumptionService_ListConsumptionsServer = grpc.ServerStreamingServer[Consumption]

func _ConsumptionService_ListCabinets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCabinetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsumptionServiceServer).ListCabinets(m, &grpc.GenericServerStream[ListCabinetsRequest, Cabinet]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConsumptionService_ListCabinetsServer = grpc.ServerStreamingServer[Cabinet]

// ConsumptionService_ServiceDesc is the grpc.ServiceDesc for ConsumptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsumptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consumption.ConsumptionService",
	HandlerType: (*ConsumptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ConsumptionService_Create_Handler,
		},
		{
			MethodName: "Consume",
			Handler:    _ConsumptionService_Consume_Handler,
		},
		{
			MethodName: "FindConsumption",
			Handler:    _ConsumptionService_FindConsumption_Handler,
		},
		{
			MethodName: "FindCabinet",
			Handler:    _ConsumptionService_FindCabinet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListConsumptions",
			Handler:       _ConsumptionService_ListConsumptions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListCabinets",
			Handler:       _ConsumptionService_ListCabinets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/consumption.proto",
}
