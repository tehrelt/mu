// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: proto/house.proto

package housepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HouseService_Create_FullMethodName                       = "/house.HouseService/Create"
	HouseService_Find_FullMethodName                         = "/house.HouseService/Find"
	HouseService_ListHousesByIds_FullMethodName              = "/house.HouseService/ListHousesByIds"
	HouseService_ListConnectedServicesOfHouse_FullMethodName = "/house.HouseService/ListConnectedServicesOfHouse"
)

// HouseServiceClient is the client API for HouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HouseServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Find(ctx context.Context, in *HouseRequest, opts ...grpc.CallOption) (*HouseResponse, error)
	ListHousesByIds(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ListHousesByIdsRequest, ListHousesResponse], error)
	ListConnectedServicesOfHouse(ctx context.Context, in *ListConnectedServicesOfHouseRequest, opts ...grpc.CallOption) (*ListConnectedServicesOfHouseResponse, error)
}

type houseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHouseServiceClient(cc grpc.ClientConnInterface) HouseServiceClient {
	return &houseServiceClient{cc}
}

func (c *houseServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, HouseService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseServiceClient) Find(ctx context.Context, in *HouseRequest, opts ...grpc.CallOption) (*HouseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HouseResponse)
	err := c.cc.Invoke(ctx, HouseService_Find_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseServiceClient) ListHousesByIds(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ListHousesByIdsRequest, ListHousesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HouseService_ServiceDesc.Streams[0], HouseService_ListHousesByIds_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListHousesByIdsRequest, ListHousesResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HouseService_ListHousesByIdsClient = grpc.BidiStreamingClient[ListHousesByIdsRequest, ListHousesResponse]

func (c *houseServiceClient) ListConnectedServicesOfHouse(ctx context.Context, in *ListConnectedServicesOfHouseRequest, opts ...grpc.CallOption) (*ListConnectedServicesOfHouseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConnectedServicesOfHouseResponse)
	err := c.cc.Invoke(ctx, HouseService_ListConnectedServicesOfHouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HouseServiceServer is the server API for HouseService service.
// All implementations must embed UnimplementedHouseServiceServer
// for forward compatibility.
type HouseServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Find(context.Context, *HouseRequest) (*HouseResponse, error)
	ListHousesByIds(grpc.BidiStreamingServer[ListHousesByIdsRequest, ListHousesResponse]) error
	ListConnectedServicesOfHouse(context.Context, *ListConnectedServicesOfHouseRequest) (*ListConnectedServicesOfHouseResponse, error)
	mustEmbedUnimplementedHouseServiceServer()
}

// UnimplementedHouseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHouseServiceServer struct{}

func (UnimplementedHouseServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedHouseServiceServer) Find(context.Context, *HouseRequest) (*HouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedHouseServiceServer) ListHousesByIds(grpc.BidiStreamingServer[ListHousesByIdsRequest, ListHousesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListHousesByIds not implemented")
}
func (UnimplementedHouseServiceServer) ListConnectedServicesOfHouse(context.Context, *ListConnectedServicesOfHouseRequest) (*ListConnectedServicesOfHouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectedServicesOfHouse not implemented")
}
func (UnimplementedHouseServiceServer) mustEmbedUnimplementedHouseServiceServer() {}
func (UnimplementedHouseServiceServer) testEmbeddedByValue()                      {}

// UnsafeHouseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HouseServiceServer will
// result in compilation errors.
type UnsafeHouseServiceServer interface {
	mustEmbedUnimplementedHouseServiceServer()
}

func RegisterHouseServiceServer(s grpc.ServiceRegistrar, srv HouseServiceServer) {
	// If the following call pancis, it indicates UnimplementedHouseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HouseService_ServiceDesc, srv)
}

func _HouseService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HouseService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HouseService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HouseService_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServiceServer).Find(ctx, req.(*HouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HouseService_ListHousesByIds_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HouseServiceServer).ListHousesByIds(&grpc.GenericServerStream[ListHousesByIdsRequest, ListHousesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HouseService_ListHousesByIdsServer = grpc.BidiStreamingServer[ListHousesByIdsRequest, ListHousesResponse]

func _HouseService_ListConnectedServicesOfHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectedServicesOfHouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServiceServer).ListConnectedServicesOfHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HouseService_ListConnectedServicesOfHouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServiceServer).ListConnectedServicesOfHouse(ctx, req.(*ListConnectedServicesOfHouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HouseService_ServiceDesc is the grpc.ServiceDesc for HouseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HouseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "house.HouseService",
	HandlerType: (*HouseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _HouseService_Create_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _HouseService_Find_Handler,
		},
		{
			MethodName: "ListConnectedServicesOfHouse",
			Handler:    _HouseService_ListConnectedServicesOfHouse_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListHousesByIds",
			Handler:       _HouseService_ListHousesByIds_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/house.proto",
}
