// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"fmt"
	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/rabbitmq/amqp091-go"
	"github.com/redis/go-redis/v9"
	"github.com/tehrelt/mu-lib/sl"
	"github.com/tehrelt/mu-lib/tracer"
	"github.com/tehrelt/mu-lib/tracer/interceptors"
	"github.com/tehrelt/mu/notification-service/internal/config"
	"github.com/tehrelt/mu/notification-service/internal/storage/pg/integrationstorage"
	"github.com/tehrelt/mu/notification-service/internal/storage/redis/otpstorage"
	"github.com/tehrelt/mu/notification-service/internal/storage/rmq"
	"github.com/tehrelt/mu/notification-service/internal/transport/amqp"
	"github.com/tehrelt/mu/notification-service/internal/transport/grpc"
	"github.com/tehrelt/mu/notification-service/internal/usecase"
	"github.com/tehrelt/mu/notification-service/pkg/pb/accountpb"
	"github.com/tehrelt/mu/notification-service/pkg/pb/ticketpb"
	"github.com/tehrelt/mu/notification-service/pkg/pb/userpb"
	"go.opentelemetry.io/otel/trace"
	grpc2 "google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"log/slog"
	"time"
)

import (
	_ "github.com/jackc/pgx/stdlib"
)

// Injectors from wire.go:

func New(ctx context.Context) (*App, func(), error) {
	configConfig := config.New()
	client, cleanup, err := _redis(ctx, configConfig)
	if err != nil {
		return nil, nil, err
	}
	storage := otpstorage.NewStorage(client)
	pool, cleanup2, err := _pg(ctx, configConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	integrationstorageStorage := integrationstorage.NewStorage(pool)
	ticketServiceClient, cleanup3, err := _ticketpb(configConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	channel, cleanup4, err := _amqp(configConfig)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	broker := rmq.New(configConfig, channel)
	userServiceClient, cleanup5, err := _userpb(configConfig)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	accountServiceClient, cleanup6, err := _accountpb(configConfig)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	useCase := usecase.New(storage, integrationstorageStorage, ticketServiceClient, broker, userServiceClient, accountServiceClient)
	tracer, err := _tracer(ctx, configConfig)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	server := grpc.New(configConfig, useCase, tracer)
	amqpConsumer := amqp.New(configConfig, channel, broker, useCase)
	v := _servers(server, amqpConsumer)
	app := newApp(v, tracer)
	return app, func() {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

func _redis(ctx context.Context, cfg *config.Config) (*redis.Client, func(), error) {

	log := slog.With()

	client := redis.NewClient(&redis.Options{
		Addr:     fmt.Sprintf("%s:%d", cfg.Redis.Host, cfg.Redis.Port),
		Password: cfg.Redis.Pass,
		DB:       0,
	})

	log.Debug("connecting to redis", slog.String("conn", cfg.Redis.ConnectionString()))
	t := time.Now()
	if err := client.Ping(ctx).Err(); err != nil {
		slog.Error("failed to connect to redis", slog.String("err", err.Error()), slog.String("conn", cfg.Redis.ConnectionString()))
		return nil, func() { client.Close() }, err
	}
	log.Info("connected to redis", slog.String("ping", fmt.Sprintf("%2.fs", time.Since(t).Seconds())))

	return client, func() { client.Close() }, nil
}

func _pg(ctx context.Context, cfg *config.Config) (*pgxpool.Pool, func(), error) {
	slog.Info("connecting to database", slog.String("connection", cfg.Postgres.ConnectionString()))

	pool, err := pgxpool.Connect(ctx, "postgres://"+cfg.Postgres.ConnectionString())
	if err != nil {
		return nil, nil, err
	}

	log := slog.With(slog.String("connection", cfg.Postgres.ConnectionString()))
	log.Debug("connecting to database")
	t := time.Now()
	if err := pool.Ping(ctx); err != nil {
		log.Error("failed to connect to database", sl.Err(err))
		return nil, func() { pool.Close() }, err
	}
	log.Info("connected to database", slog.String("ping", fmt.Sprintf("%2.fs", time.Since(t).Seconds())))

	return pool, func() { pool.Close() }, nil
}

func _amqp(cfg *config.Config) (*amqp091.Channel, func(), error) {
	cs := fmt.Sprintf("amqp://%s:%s@%s:%d/", cfg.Amqp.User, cfg.Amqp.Pass, cfg.Amqp.Host, cfg.Amqp.Port)

	log := slog.With(slog.String("cfg", "_amqp"))

	conn, err := amqp091.Dial(cs)
	if err != nil {
		return nil, nil, err
	}

	channel, err := conn.Channel()
	if err != nil {
		return nil, func() {
			conn.Close()
		}, err
	}

	closefn := func() {
		defer conn.Close()
		defer channel.Close()
	}

	exchanges := []struct {
		name string
		t    string
	}{
		{
			name: cfg.TicketStatusChangedExchange.Exchange,
			t:    "topic",
		},
		{
			name: cfg.BalanceChangedExchange,
			t:    "fanout",
		},
		{
			name: cfg.NotificationSendExchange.Exchange,
			t:    "direct",
		},
	}

	for _, exchange := range exchanges {
		log.Info("declaring exchange", slog.String("exchange", exchange.name))
		if err := channel.ExchangeDeclare(exchange.name, exchange.t, true, false, false, false, nil); err != nil {
			slog.Error("failed to declare exchange", slog.String("exchange", exchange.name), sl.Err(err))
			return nil, closefn, err
		}
	}

	queues := []struct {
		queueName string
		rk        string
		exchange  string
	}{
		{
			queueName: amqp.TicketStatusChangedQueue,
			rk:        "#",
			exchange:  cfg.TicketStatusChangedExchange.Exchange,
		},
		{
			queueName: amqp.BalanceChangedQueue,
			rk:        "",
			exchange:  cfg.BalanceChangedExchange,
		},
	}
	for _, q := range queues {
		queue, err := channel.QueueDeclare(q.queueName, true, false, false, false, nil)
		if err != nil {
			return nil, closefn, err
		}

		log.Info(
			"bindig queue to exchange", slog.String("queue", q.queueName), slog.String("exchange", q.exchange), slog.String("key", q.rk),
		)
		if err := channel.QueueBind(queue.Name, q.rk, q.exchange, false, nil); err != nil {
			return nil, closefn, err
		}
	}
	slog.Info("connected to amqp", slog.String("conn", cs))

	return channel, closefn, nil
}

func _servers(g *grpc.Server, c *amqp.AmqpConsumer) []Server {
	return []Server{c, g}
}

func _tracer(ctx context.Context, cfg *config.Config) (trace.Tracer, error) {
	jaeger := cfg.Jaeger.Endpoint
	appname := cfg.App.Name
	slog.Debug("connecting to jaeger", slog.String("jaeger", jaeger), slog.String("appname", appname))

	return tracer.SetupTracer(ctx, jaeger, appname)
}

func _ticketpb(cfg *config.Config) (ticketpb.TicketServiceClient,

	func(),
	error,
) {
	host := cfg.TicketService.Host
	port := cfg.TicketService.Port
	addr := fmt.Sprintf("%s:%d", host, port)

	client, err := grpc2.NewClient(
		addr, grpc2.WithTransportCredentials(insecure.NewCredentials()), grpc2.WithUnaryInterceptor(interceptors.UnaryClientInterceptor()), grpc2.WithStreamInterceptor(interceptors.StreamClientInterceptor()),
	)
	if err != nil {
		return nil, nil, err
	}

	return ticketpb.NewTicketServiceClient(client), func() { client.Close() }, nil
}

func _userpb(cfg *config.Config) (userpb.UserServiceClient,

	func(),
	error,
) {
	addr := cfg.UserService.Address()

	client, err := grpc2.NewClient(
		addr, grpc2.WithTransportCredentials(insecure.NewCredentials()), grpc2.WithUnaryInterceptor(interceptors.UnaryClientInterceptor()), grpc2.WithStreamInterceptor(interceptors.StreamClientInterceptor()),
	)
	if err != nil {
		return nil, nil, err
	}

	return userpb.NewUserServiceClient(client), func() { client.Close() }, nil
}

func _accountpb(cfg *config.Config) (accountpb.AccountServiceClient,

	func(),
	error,
) {
	addr := cfg.AccountService.Address()

	client, err := grpc2.NewClient(
		addr, grpc2.WithTransportCredentials(insecure.NewCredentials()), grpc2.WithUnaryInterceptor(interceptors.UnaryClientInterceptor()), grpc2.WithStreamInterceptor(interceptors.StreamClientInterceptor()),
	)
	if err != nil {
		return nil, nil, err
	}

	return accountpb.NewAccountServiceClient(client), func() { client.Close() }, nil
}
