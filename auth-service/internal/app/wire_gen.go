// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"fmt"
	"github.com/jmoiron/sqlx"
	"github.com/redis/go-redis/v9"
	"github.com/tehrelt/moi-uslugi/auth-service/internal/config"
	"github.com/tehrelt/moi-uslugi/auth-service/internal/lib/jwt"
	"github.com/tehrelt/moi-uslugi/auth-service/internal/lib/tracer"
	"github.com/tehrelt/moi-uslugi/auth-service/internal/services/authservice"
	"github.com/tehrelt/moi-uslugi/auth-service/internal/services/profileservice"
	"github.com/tehrelt/moi-uslugi/auth-service/internal/storage/grpc/usersapi"
	"github.com/tehrelt/moi-uslugi/auth-service/internal/storage/pg/credentialstorage"
	"github.com/tehrelt/moi-uslugi/auth-service/internal/storage/pg/rolestorage"
	"github.com/tehrelt/moi-uslugi/auth-service/internal/storage/redis/sessionstorage"
	grpc2 "github.com/tehrelt/moi-uslugi/auth-service/internal/transport/grpc"
	"github.com/tehrelt/moi-uslugi/auth-service/pkg/pb/userpb"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"log/slog"
	"time"
)

import (
	_ "github.com/jackc/pgx/stdlib"
)

// Injectors from wire.go:

func New(ctx context.Context) (*App, func(), error) {
	configConfig := config.New()
	api, cleanup, err := _userpb(configConfig)
	if err != nil {
		return nil, nil, err
	}
	db, cleanup2, err := _pg(configConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	roleStorage := rolestorage.New(db)
	client, cleanup3, err := _redis(configConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	sessionsStorage := sessionstorage.New(client, configConfig)
	jwtClient := jwt.New(configConfig)
	credentialStorage := credentialstorage.New(db)
	authService := authservice.New(api, api, roleStorage, sessionsStorage, configConfig, jwtClient, credentialStorage, credentialStorage)
	profileService := profileservice.New(configConfig, api, jwtClient, roleStorage)
	v := _servers(configConfig, authService, profileService)
	traceTracer, err := tracer.SetupTracer(ctx, configConfig)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	app := newApp(configConfig, v, traceTracer)
	return app, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

func _pg(cfg *config.Config) (*sqlx.DB, func(), error) {
	host := cfg.Pg.Host
	port := cfg.Pg.Port
	user := cfg.Pg.User
	pass := cfg.Pg.Pass
	name := cfg.Pg.Name

	cs := fmt.Sprintf(`postgres://%s:%s@%s:%d/%s?sslmode=disable`, user, pass, host, port, name)

	db, err := sqlx.Connect("pgx", cs)
	if err != nil {
		return nil, nil, err
	}
	slog.Debug("connecting to database", slog.String("conn", cs))
	t := time.Now()
	if err := db.Ping(); err != nil {
		slog.Error("failed to connect to database", slog.String("err", err.Error()), slog.String("conn", cs))
		return nil, func() { db.Close() }, err
	}
	slog.Info("connected to database", slog.String("ping", fmt.Sprintf("%2.fs", time.Since(t).Seconds())))

	return db, func() { db.Close() }, nil
}

func _redis(cfg *config.Config) (*redis.Client, func(), error) {
	host := cfg.Redis.Host
	port := cfg.Redis.Port
	pass := cfg.Redis.Pass

	cs := fmt.Sprintf(`redis://%s:%s@%s:%d`, host, pass, host, port)

	log := slog.With()

	client := redis.NewClient(&redis.Options{
		Addr:     fmt.Sprintf("%s:%d", host, port),
		Password: pass,
		DB:       0,
	})

	log.Debug("connecting to redis", slog.String("conn", cs))
	t := time.Now()
	if err := client.Ping(context.Background()).Err(); err != nil {
		slog.Error("failed to connect to redis", slog.String("err", err.Error()), slog.String("conn", cs))
		return nil, func() { client.Close() }, err
	}
	log.Info("connected to redis", slog.String("ping", fmt.Sprintf("%2.fs", time.Since(t).Seconds())))

	return client, func() { client.Close() }, nil
}

func _userpb(cfg *config.Config) (*usersapi.Api, func(), error) {
	host := cfg.UserService.Host
	port := cfg.UserService.Port
	addr := fmt.Sprintf("%s:%d", host, port)
	slog.Debug("connecting to user service", slog.String("addr", addr))
	conn, err := grpc.NewClient(addr, grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		return nil, nil, err
	}

	client := userpb.NewUserServiceClient(conn)
	return usersapi.New(client), func() { conn.Close() }, nil
}

func _servers(cfg *config.Config, as *authservice.AuthService, ps *profileservice.ProfileService) []Server {
	servers := make([]Server, 0, 2)
	servers = append(servers, grpc2.New(cfg, as, ps))
	return servers
}
