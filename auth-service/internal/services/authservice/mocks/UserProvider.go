// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "github.com/tehrelt/moi-uslugi/auth-service/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserProvider is an autogenerated mock type for the UserProvider type
type UserProvider struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx
func (_m *UserProvider) Count(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, slug
func (_m *UserProvider) Find(ctx context.Context, slug string) (*entity.User, error) {
	ret := _m.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.User, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserProvider creates a new instance of UserProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserProvider {
	mock := &UserProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
