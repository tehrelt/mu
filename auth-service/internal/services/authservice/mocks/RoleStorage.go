// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "github.com/tehrelt/moi-uslugi/auth-service/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// RoleStorage is an autogenerated mock type for the RoleStorage type
type RoleStorage struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, _a1
func (_m *RoleStorage) Add(ctx context.Context, _a1 *dto.AddRoles) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.AddRoles) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: ctx, _a1
func (_m *RoleStorage) Remove(ctx context.Context, _a1 *dto.RemoveRoles) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RemoveRoles) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRoleStorage creates a new instance of RoleStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoleStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoleStorage {
	mock := &RoleStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
