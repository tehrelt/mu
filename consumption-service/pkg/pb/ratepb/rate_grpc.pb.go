// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: proto/rate.proto

package ratepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RateService_Create_FullMethodName            = "/rate.RateService/Create"
	RateService_Find_FullMethodName              = "/rate.RateService/Find"
	RateService_List_FullMethodName              = "/rate.RateService/List"
	RateService_ListIds_FullMethodName           = "/rate.RateService/ListIds"
	RateService_UpdateServiceRate_FullMethodName = "/rate.RateService/UpdateServiceRate"
)

// RateServiceClient is the client API for RateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RateServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Service, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Service], error)
	ListIds(ctx context.Context, in *ListIdsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Service], error)
	UpdateServiceRate(ctx context.Context, in *UpdateServiceRateRequest, opts ...grpc.CallOption) (*UpdateServiceRateResponse, error)
}

type rateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRateServiceClient(cc grpc.ClientConnInterface) RateServiceClient {
	return &rateServiceClient{cc}
}

func (c *rateServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, RateService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateServiceClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Service, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Service)
	err := c.cc.Invoke(ctx, RateService_Find_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Service], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RateService_ServiceDesc.Streams[0], RateService_List_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListRequest, Service]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RateService_ListClient = grpc.ServerStreamingClient[Service]

func (c *rateServiceClient) ListIds(ctx context.Context, in *ListIdsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Service], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RateService_ServiceDesc.Streams[1], RateService_ListIds_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListIdsRequest, Service]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RateService_ListIdsClient = grpc.ServerStreamingClient[Service]

func (c *rateServiceClient) UpdateServiceRate(ctx context.Context, in *UpdateServiceRateRequest, opts ...grpc.CallOption) (*UpdateServiceRateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateServiceRateResponse)
	err := c.cc.Invoke(ctx, RateService_UpdateServiceRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RateServiceServer is the server API for RateService service.
// All implementations must embed UnimplementedRateServiceServer
// for forward compatibility.
type RateServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Find(context.Context, *FindRequest) (*Service, error)
	List(*ListRequest, grpc.ServerStreamingServer[Service]) error
	ListIds(*ListIdsRequest, grpc.ServerStreamingServer[Service]) error
	UpdateServiceRate(context.Context, *UpdateServiceRateRequest) (*UpdateServiceRateResponse, error)
	mustEmbedUnimplementedRateServiceServer()
}

// UnimplementedRateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRateServiceServer struct{}

func (UnimplementedRateServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRateServiceServer) Find(context.Context, *FindRequest) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedRateServiceServer) List(*ListRequest, grpc.ServerStreamingServer[Service]) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRateServiceServer) ListIds(*ListIdsRequest, grpc.ServerStreamingServer[Service]) error {
	return status.Errorf(codes.Unimplemented, "method ListIds not implemented")
}
func (UnimplementedRateServiceServer) UpdateServiceRate(context.Context, *UpdateServiceRateRequest) (*UpdateServiceRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceRate not implemented")
}
func (UnimplementedRateServiceServer) mustEmbedUnimplementedRateServiceServer() {}
func (UnimplementedRateServiceServer) testEmbeddedByValue()                     {}

// UnsafeRateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RateServiceServer will
// result in compilation errors.
type UnsafeRateServiceServer interface {
	mustEmbedUnimplementedRateServiceServer()
}

func RegisterRateServiceServer(s grpc.ServiceRegistrar, srv RateServiceServer) {
	// If the following call pancis, it indicates UnimplementedRateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RateService_ServiceDesc, srv)
}

func _RateService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateService_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateServiceServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RateServiceServer).List(m, &grpc.GenericServerStream[ListRequest, Service]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RateService_ListServer = grpc.ServerStreamingServer[Service]

func _RateService_ListIds_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListIdsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RateServiceServer).ListIds(m, &grpc.GenericServerStream[ListIdsRequest, Service]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RateService_ListIdsServer = grpc.ServerStreamingServer[Service]

func _RateService_UpdateServiceRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateServiceServer).UpdateServiceRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateService_UpdateServiceRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateServiceServer).UpdateServiceRate(ctx, req.(*UpdateServiceRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RateService_ServiceDesc is the grpc.ServiceDesc for RateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rate.RateService",
	HandlerType: (*RateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RateService_Create_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _RateService_Find_Handler,
		},
		{
			MethodName: "UpdateServiceRate",
			Handler:    _RateService_UpdateServiceRate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _RateService_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListIds",
			Handler:       _RateService_ListIds_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/rate.proto",
}
